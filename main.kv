#:kivy 1.8

<TextButton@Button>:
	color: 1, 1, 1, 1
	background_color: 0xbb / 255., 0xad / 255., 0xa0 / 255., 1.
#	background_normal: 'data/round.png'
#	background_down: 'data/round.png'
	size_hint_y: None
	height: '48dp'
	font_size: '20dp'
	bold: True



<CardSplay>:
    size_hint:None,None
    text: 'DECK'
    canvas.after:
        Color:
            rgba: (1,1,1,1) # if not self.can_draw else (240,69,0, 255)
        Line:
            width: 1
            rectangle: root.x, root.y, root.width, root.height
    Label:
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        text: root.text


<CardSplayCloseup>:
    canvas:
        Color:
            rgba: (0,0,0,1)
        Rectangle:
            pos: self.pos
            size: self.size


<ButLabel>:
    touching: False
    pressed: False
    canvas.before:
        Color:
            rgba: (0,0,0,1) if not self.touching else (0.25,0.1,0,1)
        Rectangle:
            pos: self.pos
            size: self.size


<CardSelector>:
    card_splay: card_splay
    but_ok_pressed: but_ok.pressed
    num_to_pick: 1
    cards: []
    rows_needed: max(int(-(-len(self.cards) // 4)), 1)
    card_size: 70,50
    size_hint: (None, None)
    size: self.card_size[0]*5, self.card_size[1]*(1+self.rows_needed)
    pos_hint: {'center_x':0.5,'center_y':0.5}
    orientation: 'vertical'
    spacing: 10
    padding: 20
    canvas.before:
        Color:
            rgba: (0,0,0,1)
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        text: 'You may choose a card' if root.num_to_pick==1 else f'You may choose {root.num_to_pick} cards' if root.num_to_pick==1 else 'Available cards'
        size_hint: (1, None)
        height: root.card_size[1]//5
        font_size: self.height//2
    GridLayout:
        id: card_splay
        size_hint: (1, None)
        height: root.card_size[1]*root.rows_needed
        rows: root.rows_needed
        spacing: root.card_size[1]//10
    BoxLayout:
        size_hint: (1, None)
        height: root.card_size[1]//5
        orientation: 'horizontal'
        ButLabel:
            id: but_ok
            text: 'Confirm' if root.num_to_pick>0 else 'Close'
            font_size: self.height//2


<Map>:
    size_hint: None, None
    rows: 3
    cols: 4
 #   canvas.before:
 #       Color:
 #           rgba: (0.5,0.5,0.5,1)
 #       Rectangle:
 #           pos: self.pos
 #           size: self.size

<Tile>:
    letter: 'A'
    value: 1
    w_label: label_text
    size_hint: (None, None)
    canvas:
        Color:
            rgba: app.colors['tile_selected'] if self.selected else app.colors['tile'] if self.active else app.colors['tile_inactive']
        Quad:
            points: [self.pos[0]+0,self.pos[1]+0, self.pos[0]+self.size[0],self.pos[1]+0, self.pos[0]+self.size[0],self.pos[1]+self.size[1], self.pos[0]+0,self.pos[1]+self.size[1]]
    Label:
        id: label_text
        halign: 'center'
        size: root.size
        pos: root.pos
        font_size: root.size[0]/1.5
        text: str(root.letter)
        color: app.colors['tile_letter_text']
    Label:
        id: label_value
        halign: 'center'
        size: root.size[0]/4,root.size[1]/4
        pos: root.pos
        font_size: root.size[0]/5
        text: str(root.value) if root.letter!='' else ''
        color: app.colors['tile_letter_text']

<Hand>:
    size_hint: None, None
    selected_action: ''

<PlayerDiscard>:
    size_hint: None, None

<PlayerDeck>:
    size_hint: None, None

<PlayerTraits>:
    size_hint: None, None

<Exhausted>:
    size_hint: None, None

<LootDeck>:
    size_hint: None, None

<MarketDeck>:
    size_hint: None, None

<MarketOffer>:
    size_hint: None, None

<EventDeck>:
    size_hint: None, None

<EventDiscard>:
    size_hint: None, None

<NoiseTracker>:
    size_hint: None, None
    noise: 0
    text: str(self.noise)
    font_size: 4*self.height//5
    canvas.before:
        Color:
            rgb: (0,0.2,0.5)
        Line:
            width: 1+self.width//20
            points:
                self.x, self.center_y, \
                self.x+1*self.width//8, self.center_y+self.noise*self.height//(12*4), \
                self.x+2*self.width//8, self.center_y-self.noise*self.height//(12*3), \
                self.x+3*self.width//8, self.center_y+self.noise*self.height//(12*2), \
                self.x+4*self.width//8, self.center_y-self.noise*self.height//12, \
                self.x+5*self.width//8, self.center_y+self.noise*self.height//(12*2), \
                self.x+6*self.width//8, self.center_y-self.noise*self.height//(12*3), \
                self.x+7*self.width//8, self.center_y+self.noise*self.height//(12*4), \
                self.x+self.width, self.center_y

<MapChoice>:
    map_pos: 0,0
    pos: self.map_pos[0]*self.size[0], self.map_pos[1]*self.size[1]
    choice_type: 'touch' #touch, visible or info
    size_hint: None, None
    canvas.after:
        Color:
            rgb: (240,69,0) if self.choice_type=='touch' else (192,0,0) if self.choice_type=='visible' else (170,170,170)
        Line:
            width: 1+self.width//20
            points: self.x+self.width//10, self.y, self.x, self.y, self.x, self.y+self.width//10
        Line:
            width: 1+self.width//20
            points: self.right-self.width//10, self.y, self.right, self.y, self.right, self.y+self.width//10
        Line:
            width: 1+self.width//20
            points: self.x+self.width//10, self.top, self.x, self.top, self.x, self.top-self.width//10
        Line:
            width: 1+self.width//20
            points: self.right-self.width//10, self.top, self.right, self.top, self.right, self.top-self.width//10

<TokenMapChoice>:
    pos: self.token.pos
    size: self.token.size
    size_hint: None, None
    choice_type: 'touch' #touch or info
    canvas.after:
        Color:
            rgb: (240,69,0) if self.choice_type=='touch' else (170,170,170)
        Line:
            width: 1+self.width//20
            points: self.x+self.width//10, self.y, self.x, self.y, self.x, self.y+self.width//10
        Line:
            width: 1+self.width//20
            points: self.right-self.width//10, self.y, self.right, self.y, self.right, self.y+self.width//10
        Line:
            width: 1+self.width//20
            points: self.x+self.width//10, self.top, self.x, self.top, self.x, self.top-self.width//10
        Line:
            width: 1+self.width//20
            points: self.right-self.width//10, self.top, self.right, self.top, self.right, self.top-self.width//10



<Token>:
    map_pos: 0,0
    off: 0,0
    size_hint: None, None

<GuardToken>:
    state: 'dozing' #dozing, alert, unconscious, dead


<TargetToken>:


<PlayerToken>:
    canvas.after:
        Color:
            rgb: 0.5,0.5,0.5
        Ellipse:
            pos: self.x+(self.width)//10,self.y+(self.height)//10
            size: root.width*4//5, root.height*4//5
        Color:
            rgb: 0,0,0
        Ellipse:
            pos: self.x+(self.width)//3-root.width*3//40,self.y+(self.height)//2-root.height*3//40
            size: root.width*3//10, root.height*3//10
            angle_start: 90
            angle_end: 270
        Ellipse:
            pos: self.x+(self.width)*2//3-root.width*3//40,self.y+(self.height)//2-root.height*3//40
            size: root.width*3//10, root.height*3//10
            angle_start: 90
            angle_end: 270
        Line:
            width: 1+root.height//30
            points: self.x+(self.width)*2//5,self.y+(self.height)//3,self.x+(self.width)*3//5,self.y+(self.height)//3

<ActionSelectorOption>:
    _touching: False
    canvas.before:
        Color:
            rgb: (0.75,0.75,0.75) if self._touching else (0.5,0.5,0.5)
        Rectangle:
            pos: self.pos
            size: self.size

<Stats>:
    orientation: 'vertical'
    size_hint: None, None
    x: self.parent.x + self.parent.width//8 if self.parent is not None else 0
    y: self.parent.y + self.parent.height//8 if self.parent is not None else 0
    width: 3*self.parent.width//4 if self.parent is not None else 0
    height: 3*self.parent.height//4  if self.parent is not None else 0
    restart: restart
    quit: quit
    kills: 0
    knockouts: 0
    contacts: 0
    loot: 0
    rounds: 0
    t_kills: 0
    t_knockouts: 0
    t_contacts: 0
    t_loot: 0
    t_rounds: 0
    showing: False
    canvas.before:
        Color:
            rgba: (0.25,0.25,0.25,1)
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        orientation: 'vertical'
        Label:
            size_hint: 1,0.3
            text: 'GAME OVER'
            text_size: root.width, None
            font_size: self.size[1]//2
            canvas.before:
                Color:
                    rgba: (0.3,0,0.1,1)
                Rectangle:
                    pos: self.pos
                    size: self.size
        BoxLayout:
            orientation: 'vertical'
            size_hint: 1,0.7
            Label:
                size_hint: 1,1/6
                text: 'Kills: {value} / {tvalue}'.format(value=root.kills, tvalue=root.t_kills)
            Label:
                size_hint: 1,1/6
                text: 'Knockouts: {value} / {tvalue}'.format(value=root.knockouts, tvalue=root.t_knockouts)
            Label:
                size_hint: 1,1/6
                text: 'Guard contacts: {value} / {tvalue}'.format(value=root.contacts, tvalue=root.t_contacts)
            Label:
                size_hint: 1,1/6
                text: 'Loot collected: {value} / {tvalue}'.format(value=root.loot, tvalue=root.t_loot)
            Label:
                size_hint: 1,1/6
                text: 'Rounds played: {value} / {tvalue}'.format(value=root.rounds, tvalue=root.t_rounds)
            BoxLayout:
                size_hint: 1,1/6
                orientation: 'horizontal'
                padding: self.size[1]//10
                spacing: self.size[1]//10
                Label:
                    id: restart
                    size_hint: 0.4,1
                    text: 'RESTART'
                    font_size: 2*self.size[1]//3
                    canvas.before:
                        Color:
                            rgba: (0,0,0,1)
                        Rectangle:
                            pos: self.pos
                            size: self.size
                Label:
                    id: quit
                    size_hint: 0.4,1
                    text: 'QUIT'
                    font_size: 2*self.size[1]//3
                    canvas.before:
                        Color:
                            rgba: (0,0,0,1)
                        Rectangle:
                            pos: self.pos
                            size: self.size


<PlayArea>:
    playerdiscard: playerdiscard
    playerdeck: playerdeck
    playertraits: playertraits
    playerprompt: playerprompt
    activecardsplay: activecardsplay
    exhausted: exhausted
    noisetracker: noisetracker
    hand: hand
    map: map
    loot1: loot1
    loot2: loot2
    loot3: loot3
    marketdeck: marketdeck
    eventdeck: eventdeck
    eventdiscard: eventdiscard
    board: board

    map_card_grid_size: 5,7
    map_size: 6, 3
    card_aspect_ratio: self.map_card_grid_size[0]/self.map_card_grid_size[1]
    hz_cards: self.width//5 #how many cards we need to fit horizontally in a vertical orientation screen
    vt_cards: self.height//4.2 #how many cards we need to fit vertically in a horizontal orientation screen
    card_size: (self.hz_cards,self.hz_cards//self.card_aspect_ratio) if self.height>self.width else (self.vt_cards*self.card_aspect_ratio//self.map_card_grid_size[0]*self.map_card_grid_size[0],self.vt_cards)
    scroll_size: (self.width, self.height-16*self.card_size[1]//5) if self.height>self.width else (self.width-12*self.card_size[0]//5, self.height-6*self.card_size[1]//5)
    zoom: 1.0
    map_scale: max(self.scroll_size[1]/(3*self.card_size[1]), self.scroll_size[0]/(6*self.card_size[0]))
    map_card_size: self.card_size[0]*self.map_scale*self.zoom//self.map_card_grid_size[0]*self.map_card_grid_size[0], self.card_size[1]*self.map_scale*self.zoom//self.map_card_grid_size[1]*self.map_card_grid_size[1]
    paddy: 0
    paddx: 0
    ActiveCardSplay:
        id: activecardsplay
        text: 'ACTIVE\nCARD'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.card_size[0]*6//5 if root.height>=root.width else 0
        y: root.card_size[1] if root.height>=root.width else 0
    PlayerTraits:
        id: playertraits
        text: 'PLAYER\nTRAITS'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: 0
        y: root.card_size[1]
    PlayerDeck:
        id: playerdeck
        text: 'PLAYER\nDECK'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        y: root.height - root.card_size[1] if root.height>=root.width else root.height - 2*root.card_size[1]
        x: 0
    PlayerDiscard:
        id: playerdiscard
        text: 'PLAYER\nDISCARD'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        y: root.height - root.card_size[1]
        x: root.card_size[0]*6//5 if root.height>=root.width else 0
    NoiseTracker:
        id: noisetracker
        size: root.card_size[0]//5, root.card_size[0]//5
        y: root.height - root.card_size[1] if root.height>=root.width else 2*root.card_size[1]
        x: 2*root.card_size[0]*6//5 if root.height>=root.width else (6*root.card_size[0]//5-self.width)//2
    LootDeck:
        id: loot1
        text: 'LOOT1'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width
        y: 0
    LootDeck:
        id: loot2
        text: 'LOOT2'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width
        y: root.card_size[1]
    LootDeck:
        id: loot3
        text: 'LOOT3'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width
        y: 2*root.card_size[1]
    Exhausted:
        id: exhausted
        text: 'EXHAUSTED\nCARDS PILE'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width
        y: 3*root.card_size[1]
    MarketDeck:
        id: marketdeck
        text: 'MARKET\nDECK'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width-root.card_size[0] if root.height>=root.width else root.width - root.card_size[0]*6//5
        y: root.card_size[1] if root.height>=root.width else 0
    EventDeck:
        id: eventdeck
        text: 'EVENT\nDECK'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width - root.card_size[0]*6//5
        y: root.height - root.card_size[1] if root.height>=root.width else root.height - 2*root.card_size[1]
    EventDiscard:
        id: eventdiscard
        text: 'EVENT\nDISCARD'
        size_hint: None, None
        size: root.card_size[0]*6//5, root.card_size[1]
        x: root.width - 2*root.card_size[0]*6//5 if root.height>=root.width else root.width - root.card_size[0]*6//5
        y: root.height - root.card_size[1]
    Hand:
        id: hand
        text: 'PLAYER\nHAND'
        card_spread_scale: 1
        size_hint: None, None
        size: min(root.width,root.card_size[0]*6),root.card_size[1]
        y: 0
        x: 0 if root.height>=root.width else (root.width-root.card_size[0]*6)//2
    ScrollView:
        size_hint: None, None
        x: 0 if root.height>=root.width else root.card_size[0]*6//5
        y: 2*root.card_size[1] if root.height>=root.width else root.card_size[1]
        size: root.scroll_size
        always_overscroll: False
        effect_cls: 'ScrollEffect'
        Board:
            id: board
            map: map
            size_hint: None, None
            size: root.map_card_size[0]*root.map_size[0], root.map_card_size[1]*root.map_size[1]
            scale: 1.0
            space_size: root.map_card_size[0]//root.map_card_grid_size[0], root.map_card_size[1]//root.map_card_grid_size[1]
            map_card_grid_size: root.map_card_grid_size
#            x: 0
#            y: 0
            w: root.map_card_grid_size[0]*root.map_size[0]
            h: root.map_card_grid_size[1]*root.map_size[1]
            Map:
                orientation: 'lr-bt'
                id: map
                rows: root.map_size[1]
                cols: root.map_size[0]
                size_hint: None, None
                size: root.map_card_size[0]*root.map_size[0], root.map_card_size[1]*root.map_size[1]
    Label:
        id: playerprompt
        text: 'Select a card from your hand to play, or tap the event card to end your turn'
        size_hint: None, None
        font_size: root.card_size[1]*0.3//3
        size: root.width, root.card_size[1]//5
        y: root.height - 6*root.card_size[1]//5 if root.height>=root.width else root.height - root.card_size[1]//5
        x: root.width//40
